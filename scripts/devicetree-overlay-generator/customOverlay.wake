#
# Wake API for Specifying a custom Devicetree Overlay
#
# If the needs of your project aren't met by the heuristics
# of the python-based overlay generator, you can instead
# generate a custom overlay using these wake rules to specify
# the properties in the chosen node.
#
# Example:
# --------
#
# def entry = makeDevicetreeChosenMemoryEntry "/soc/bootrom@20000000" 0 0
# def ram = makeDevicetreeChosenMemoryRam "/soc/sram@80000000" 0 0
# def itim = None
# def chosenNode = makeDevicetreeChosenNode entry ram itim
#
# makeDevicetreeCustomOverlay ("core.dts", Nil) chosenNode
# | (writeDevicetreeCustomOverlay "design.dts" _)
#
# --------
# If you want to specify the boothart, you can set it explicitly as below
#
# def chosenNode =
#   makeDevicetreeChosenNode entry ram itim
#   | setDevicetreeChosenNodeHart(Some(makeDevicetreeChosenBootHart "/cpus/cpu@0"))


tuple DevicetreeChosenMemory =
  global Property:  String
  global NodePath:  String
  global RegTuple:  Integer
  global RegOffset: Integer

tuple DevicetreeChosenHart =
  global Property:  String
  global NodePath:  String

global def makeDevicetreeChosenMemoryEntry nodePath regTuple regOffset =
  DevicetreeChosenMemory "metal,entry" nodePath regTuple regOffset

global def makeDevicetreeChosenMemoryRam nodePath regTuple regOffset =
  DevicetreeChosenMemory "metal,ram" nodePath regTuple regOffset

global def makeDevicetreeChosenMemoryItim nodePath regTuple regOffset =
  DevicetreeChosenMemory "metal,itim" nodePath regTuple regOffset

global def makeDevicetreeChosenBootHart nodePath =
  DevicetreeChosenHart "metal,boothart" nodePath

tuple DevicetreeChosenNode =
  global Entry: DevicetreeChosenMemory
  global Ram:   DevicetreeChosenMemory
  global Itim:  Option DevicetreeChosenMemory
  global Hart:  Option DevicetreeChosenHart

global def makeDevicetreeChosenNode entry ram itim =
  DevicetreeChosenNode entry ram itim None

tuple DevicetreeCustomOverlay =
  global Includes:           List String
  global ChosenNode:         DevicetreeChosenNode
  global AdditionalContents: String

global def makeDevicetreeCustomOverlay includes chosenNode =
  DevicetreeCustomOverlay includes chosenNode ""

global target writeDevicetreeCustomOverlay file customOverlay =
  def makeInclude include =
    "/include/ \"{include}\"\n", Nil
  def includes = mapFlat makeInclude customOverlay.getDevicetreeCustomOverlayIncludes

  def chosenContents =
    def makeLine chosenMemory =
      def property = chosenMemory.getDevicetreeChosenMemoryProperty
      def reference = "&\{{chosenMemory.getDevicetreeChosenMemoryNodePath}\}"
      def regTuple = "{str chosenMemory.getDevicetreeChosenMemoryRegTuple}"
      def regOffset = "{str chosenMemory.getDevicetreeChosenMemoryRegOffset}"

      "    {property} = <{reference} {regTuple} {regOffset}>;\n"

    def makeLineForHart chosenHart =
      def property = chosenHart.getDevicetreeChosenHartProperty
      def reference = "&\{{chosenHart.getDevicetreeChosenHartNodePath}\}"

      "    {property} = <{reference}>;\n"

    def chosenNode = customOverlay.getDevicetreeCustomOverlayChosenNode
    def entry = makeLine chosenNode.getDevicetreeChosenNodeEntry
    def ram = makeLine chosenNode.getDevicetreeChosenNodeRam
    def itim = match chosenNode.getDevicetreeChosenNodeItim
      Some chosenMemory = makeLine chosenMemory
      None = ""
    def hart = match chosenNode.getDevicetreeChosenNodeHart
      Some chosenHart = makeLineForHart chosenHart
      None = ""

    "  chosen \{\n{entry}{ram}{itim}{hart}  \};\n"

  def rootNode = "/ \{\n{chosenContents}\};"

  def additionalContents = customOverlay.getDevicetreeCustomOverlayAdditionalContents

  write file (cat (includes ++ (rootNode, additionalContents, Nil)))
